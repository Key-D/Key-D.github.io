<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>js中关于构造函数、原型和实例对象</title>
    <link href="/2020/08/07/js-zhong-guan-yu-gou-zao-han-shu-yuan-xing-he-shi-li-dui-xiang/"/>
    <url>/2020/08/07/js-zhong-guan-yu-gou-zao-han-shu-yuan-xing-he-shi-li-dui-xiang/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>关于这些天的面试，做了一个总结。感叹一下，感觉前端工作出身平凡好难找5<del>5</del>5，市面上很多公司最低门槛都是两三年经验起步，还是回到那句话，<strong>不给机会，哪来的经验。。。</strong>有人说，好的程序员都是项目喂出来的，但是也能理解，公司招聘员工，员工需要为公司创造生产力，不能立刻创造价值的，就被筛选下来。。这些天的面试，经常会被问到JS中原生的一些基础的东西，关于原型链、数组去重、this指向、闭包等等，这也也是大多数前端面试被经常提及的，如何三大框架纵横的天下，感觉太投入和依赖框架，对于原生JS，似乎被遗忘了。很多js的基础，只能说出是什么，至于怎么用，用在哪里，用它的好处以及延伸？只能说出个大概，经常看到有人说，学习前端，不要太过依赖框架，好的程序员，一定对原生了解的透彻。务实基础，才是最重要的的，在此，勉励自己！！！</p><p>参加了一个公司的线上笔试，遇到一些很有意思的题，也有一些坑（全踩），在此结合知识点记录下来</p><h3 id="一、什么是JS原型-解释原型，就会涉及到构造函数和实例对象"><a href="#一、什么是JS原型-解释原型，就会涉及到构造函数和实例对象" class="headerlink" title="一、什么是JS原型? 解释原型，就会涉及到构造函数和实例对象"></a>一、什么是JS原型? 解释原型，就会涉及到构造函数和实例对象</h3><p><strong>·构造函数</strong> ：用function声明的就是函数，任何函数都可以作为构造函数。主要从功能和用法上区分普通函数和构造函数。直接调用则是一个普通函数，对象调用，则是一个方法（方法也是函数），构造函数规范定义时首字母大写，且一般配合关键字new调用来创建初始化对象。</p><p><strong>·原型对象</strong> ：每个构造函数在创建时，系统就会在内存中关联创建一个空对象，这就是原型对象。构造函数通过属性<code>prototype</code>指向原型对象，原型对象通过属性<code>constructor</code>指向这个构造函数</p><p><strong>·实例对象</strong> ：通过关键字new调用构造函数，就会得到一个实例对象。</p><pre class="line-numbers language-hljs JavaScript"><span class="hljs-comment"><code class="language-hljs JavaScript"><span class="hljs-comment">//声明构造函数</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span> (<span class="hljs-params"></span>)</span>{}<span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">new</span> Foo()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建对象的过程：<br>1、创建一个空对象<br>2、设置<code>__proto__</code>属性指向构造函数的prototype原型<br>3、将构造函数的this指向这个空对象<br>4、初始化属性和值<br>5、返回对象地址</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>·每个构造函数可以创建无数个实例对象，但是每个对象都是独一无二的，继承构造的函数中的属性和方法不共享。<br>·当访问对象的属性或者方法时，会先在当前对象找，如果找不到，则向<code>__proto__</code>属性指向的原型对象继续找<br>·同一个构造函数创建的多个实例对象，<code>__proto__</code>指向同一个原型对象,且所有实例对象继承原型的属性和方法</p><pre class="line-numbers language-hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"><code class="language-hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params">name</span>)</span>{    <span class="hljs-keyword">this</span>.name = name,    <span class="hljs-keyword">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"saychufa"</span>)    }}<span class="hljs-keyword">var</span> foo1 = <span class="hljs-keyword">new</span> Foo(<span class="hljs-string">'zhangsan'</span>);<span class="hljs-keyword">var</span> foo2 = <span class="hljs-keyword">new</span> Foo(<span class="hljs-string">'lisi'</span>)<span class="hljs-built_in">console</span>.log(foo1.say == foo2.say) <span class="hljs-comment">//false，构造函数中的方法不共享</span><span class="hljs-built_in">console</span>.log(foo1.__proto__ == foo2.__proto__)  <span class="hljs-comment">//true,实例对象指向同一个原型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：方法定义在构造函数内，创建多个实例对象时，每个实例的方法都是不同的，容易造成内存资源浪费，可以将方法定义在构造函数<code>prototype</code>原型对象上</p><pre class="line-numbers language-hljs JavaScript"> <span class="hljs-comment"><code class="language-hljs JavaScript"> <span class="hljs-comment">//定义构造函数</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span> (<span class="hljs-params"></span>) </span>{}<span class="hljs-comment">//向原型上添加方法</span>Foo.prototype.eat = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>{}<span class="hljs-keyword">var</span> foo1 = <span class="hljs-keyword">new</span> Foo()<span class="hljs-keyword">var</span> foo2 = <span class="hljs-keyword">new</span> Foo()<span class="hljs-built_in">console</span>.log(foo1.eat === foo2.eat)  <span class="hljs-comment">//true,两个不同实例对象共享同一个方法，只占用一块内存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="原型替换"><a href="#原型替换" class="headerlink" title="原型替换"></a>原型替换</h4><p>·我们可以用一个新的对象替换掉构造函数创建的原型对象，这里有个问题，替换之前实例化的对象和替换之后实例化的对象，<code>__proto__</code>属性指向的原型对象不一致，且替换原型对象后，已经实例化的对象的原型并不会改变！！！</p><p>借用我面试的一道题</p><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> father1 = {name: <span class="hljs-string">"John"</span>}<span class="hljs-keyword">var</span> father2 = {name: <span class="hljs-string">"Tom"</span>}            <span class="hljs-keyword">var</span> Son = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{ };            <span class="hljs-comment">//第一次替换原型对象</span>Son.prototype = father1;<span class="hljs-keyword">var</span> son1 = <span class="hljs-keyword">new</span> Son()            <span class="hljs-built_in">console</span>.log(son1.name)<span class="hljs-comment">//John</span>            <span class="hljs-comment">//第二次替换原型</span>Son.prototype = father2;<span class="hljs-built_in">console</span>.log(son1.name);<span class="hljs-comment">//John  </span><span class="hljs-keyword">var</span> son2 = <span class="hljs-keyword">new</span> Son();<span class="hljs-built_in">console</span>.log(son2.name);<span class="hljs-comment">//Tom</span>son2.name = <span class="hljs-string">"jack"</span>;<span class="hljs-built_in">console</span>.log(father2.name)<span class="hljs-comment">//Tom</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当构造函数初始化以后，第一次改变原型对象后，实例化对象son1后，打印对象name属性，顺着原型往上找，为John，没有问题。然后继续改变原型对象，再打印son1对象的name属性，按照赋值的思路，原型对象改变后，实例的属性也会改变，但是结果打印还是John，what？？？一开始踩了坑，为什么替换构造函数的原型对象发生改变对已经实例化的对象没有影响？因为实际上 已经实例化的对象 关联的是不同的对象，所以没有影响，<strong>即使构造函数prototype属性指向的原型对象发生改变，原来的原型对象依然不会销毁，因为已经实例化的对象的<strong>proto</strong>属性指向着它</strong></p><h3 id="二、原型链"><a href="#二、原型链" class="headerlink" title="二、原型链"></a>二、原型链</h3><p>**每个对象都有原型，且原型也是一个对象，所以原型也有原型，这样向下顺着<code>__proto__</code>找，直到Object，和null，这样就会形成原型链</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于js的预解析和变量提升</title>
    <link href="/2020/08/07/guan-yu-js-de-yu-jie-xi-he-bian-liang-ti-sheng/"/>
    <url>/2020/08/07/guan-yu-js-de-yu-jie-xi-he-bian-liang-ti-sheng/</url>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js中获取元素宽高的属性和方法</title>
    <link href="/2020/08/07/js-zhong-huo-qu-yuan-su-kuan-gao-de-shu-xing-he-fang-fa/"/>
    <url>/2020/08/07/js-zhong-huo-qu-yuan-su-kuan-gao-de-shu-xing-he-fang-fa/</url>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js中操作对象属性点 . 和中括号 [] 的区别</title>
    <link href="/2020/08/06/js-zhong-cao-zuo-dui-xiang-shu-xing-dian-he-zhong-gua-hao-de-qu-bie/"/>
    <url>/2020/08/06/js-zhong-cao-zuo-dui-xiang-shu-xing-dian-he-zhong-gua-hao-de-qu-bie/</url>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于JavaScript中this指向问题以及call apply bind方法</title>
    <link href="/2020/08/06/guan-yu-javascript-zhong-this-zhi-xiang-wen-ti-yi-ji-call-apply-bind-fang-fa/"/>
    <url>/2020/08/06/guan-yu-javascript-zhong-this-zhi-xiang-wen-ti-yi-ji-call-apply-bind-fang-fa/</url>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博客诞生庆祝篇</title>
    <link href="/2020/06/10/my-new-post/"/>
    <url>/2020/06/10/my-new-post/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到key_d的博客，闲杂分享开始</p><h2 id="准备起飞"><a href="#准备起飞" class="headerlink" title="准备起飞"></a>准备起飞</h2><h3 id="从html、css、js开始，前端，秒不可言"><a href="#从html、css、js开始，前端，秒不可言" class="headerlink" title="从html、css、js开始，前端，秒不可言"></a>从html、css、js开始，前端，秒不可言</h3><pre class="line-numbers language-bash"><code class="language-bash">$ respect txh+<span class="token string">"添"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
    <tags>
      
      <tag>第一 ,添</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/10/hello-world/"/>
    <url>/2020/06/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
